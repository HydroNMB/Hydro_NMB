#ifndef CONFIGURATION_H
#define CONFIGURATION_H


#include <stdbool.h>
#include <stdint.h>
#define OTA_URL                   "https://192.168.1.23:8000/app-teamplate.bin"                        // OTA file download URL
#define DOWNLOAD_URL              "http://192.168.1.23:8000/file.json"                                 // Test URL for download file 
#define SETUP_URL                 "http://192.168.1.23:8000/Setup.json"
#define RECORD_URL                "http://192.168.1.23:8000/data.json"
#define UPLOAD_URL                "https://webhook.site/4a116fb7-d931-4b1e-b84e-b7b3a4588aff"         // Test URL for File OR data Upload

#define TPM_PERSISTENT_HANDLE      0x81010001

#define WIFI_SSID                 "Your_SSID"                                                   // Replace with your Wi-Fi SSID
#define WIFI_PASSWORD             "Your_PASS"                                                          // Replace with your Wi-Fi password
 

#define MOUNT_POINT               "/emmc"

#define   WOLFSSL_BASE64_ENCODE

#define SYSTEM_table_URL              "http://192.168.1.23:8000/SYSTEM_table.json"
#define setup_table_URL               "http://192.168.1.23:8000/setup.json"
#define realtime_table_URL            "http://192.168.1.23:8000/realtime.json"
#define record_able_URL               "http://192.168.1.23:8000/record.json"
#define activitylog_table_URL         "http://192.168.1.23:8000/activitylog.json"
#define firmware_table_URL            "http://192.168.1.23:8000/firmware.json"
#define timezone_table_URL            "http://192.168.1.23:8000/timezone.json"
#define xdd_hyc_setup_table_URL       "http://192.168.1.23:8000/xdd_hyc_setup.json"
#define xdd_tec_setup_table_URL       "http://192.168.1.23:8000/xdd_tecc_setup.json"

#define NUM_NODES 14
#define RT_BUFFER_SIZE 3
 
extern bool MainDelayComplete;
extern bool TEWait;

 typedef enum 
{
    Main_START = 0,
    GET_NUM_SYSTEMS,
    WRITE_DEFAULT_SYSTEM_TO_DATABASE,
    READ_SYSTEM_FROM_DATABASE,
    GET_NUM_FIRMWARES,
    WRITE_DEFAULT_FW_TO_DATABASE,
    READ_FIRMWARE_FROM_DATABASE,
    CHECK_FOR_UPDATE_BIN,
    WRITE_FIRMWARE_TO_DATABASE,
    READ_TIMEZONENAME_FROM_DATABASE,
    VALIDATE_SETUP_HYC,
    INITIALIZE_LAST_MAX_HYC_APPEND_NUMBER,
    RUN_TE_SM,
    NEXT_NODE,
    CHECK_FOR_NEW_HC_FIRMWARE_FILE,
    PROCESS_NEW_HC_FIRMWARE,
    UPDATE_FIRMWARE_DATABASE,
    CHECK_FOR_NEW_HC_SETUP,
    PROCESS_NEW_HC_SETUP,
    DB_FAILURE
}MainStates;

typedef enum 
{
    TEStates_START = 0,
    ENROLL,
    GET_STARTUP_DATA,
    INITIALIZE,
    POLL,
    TRANSFER_SETUP,
    TRANSFER_C2DSETUP,
    TRANSFER_RECORD,
    TRANSFER_C2DFIRMWARE,
    ERROR_OFF
}TEStates;
typedef enum 
{
    START_POLL = 0,
    START_WRITE_POWER_UP_CLEAR,
    START_WRITE_DB_NODE_NOT_PRESENT
}StartStates;
typedef enum StartStatus
{
    START_INCOMPLETE = 0,
    START_UART_ERROR,
    START_DB_ERROR,
    START_COMPLETE
}StartStatus;

typedef enum 
{
    READ_SERIAL_NUMBER = 0,
    READ_SOFTWARE_ID,
    WRITE_DB_FW_REV,
    WRITE_DB_NODE_PRESENT,
    WRITE_DB_NODE_NOT_PRESENT
}EnrollStates;

typedef enum 
{
    ENROLL_INCOMPLETE = 0,
    ENROLL_UART_ERROR,
    ENROLL_DB_ERROR,
    ENROLL_PRESENT,
    ENROLL_NOT_PRESENT
}EnrollStatus;
 typedef enum 
{
    STARTUP_SW_ID = 0,
    STARTUP_ALT_BUILD,
    STARTUP_WRITE_ALT_BUILD_TO_DB,
    STARTUP_MACHINE_NAME,
    STARTUP_COMPANY_NAME,
    STARTUP_ACCOUNT_NAME,
    STARTUP_DST,
    STARTUP_OP_STATE,
    STARTUP_CYCLE_COUNTER,
    STARTUP_CURRENT_START_TIMESTAMP,
    STARTUP_CURRENT_FORMULA_NUMBER,
    STARTUP_CURRENT_FORMULA_NAME,
    STARTUP_CURRENT_WEIGHT,
    STARTUP_LAST_START_TIMESTAMP,
    STARTUP_LAST_END_TIMESTAMP,
    STARTUP_LAST_FORMULA_NUMBER,
    STARTUP_LAST_FORMULA_NAME,
    STARTUP_LAST_WEIGHT,
    STARTUP_WRITE_DB_NODE_NOT_PRESENT
}StartUpStates;
typedef enum 
{
    STARTUP_INCOMPLETE = 0,
    STARTUP_UART_ERROR,
    STARTUP_DB_ERROR,
    STARTUP_COMPLETE
}StartUpStatus2;

typedef enum 
{
    INIT_POLL = 0,
    INIT_SET_LOCAL_TIME,
    INIT_SET_DST,
    INIT_READ_RECORD_INDEX,
    INIT_READ_OLDEST_UNTRANSFERRED_RECORD,
    INIT_READ_RECORD_BY_INDEX,
    INIT_WRITE_RECORD_TO_DB,
    INIT_WRITE_REALTIME_TO_DB,
    INIT_WRITE_RECORD_TRANSFERRED,
    INIT_READ_SETUP_INDEX,
    INIT_READ_OLDEST_UNSTRANSFERRED_SETUP,
    INIT_READ_SETUP_TIMESTAMP_BY_INDEX,
    INIT_READ_MACHINE_NAME_BY_INDEX,
    INIT_READ_COMPANY_NAME_BY_INDEX,
    INIT_READ_ACCOUNT_NAME_BY_INDEX,
    INIT_READ_INSTALLERS_PASSWORD_BY_INDEX,
    INIT_READ_SYSCONFIG_BY_INDEX,
    INIT_READ_PUMPS_BY_INDEX,
    INIT_READ_FORMULAS_BY_INDEX,
    INIT_READ_TUBE_ALARM_BY_INDEX,
    INIT_WRITE_SETUP_TO_DB,
    INIT_WRITE_SETUP_TRANSFERRED,
    INIT_REALTIME_INIT,
    INIT_CHECK_FW_STATUS,
    INIT_WRITE_FIRMWARE_TO_DATABASE,
    INIT_GET_NUM_SETUPS,
    INIT_WRITE_DEFAULT_SETUP_TO_DB,
    INIT_WRITE_DB_NODE_NOT_PRESENT
}InitializeStates;
typedef enum 
{
    INITIALIZE_INCOMPLETE = 0,
    INITIALIZE_UART_ERROR,
    INITIALIZE_DB_ERROR,
    INITIALIZE_COMPLETE
}InitializeStatus;
typedef enum 
{
    POLL_POLL = 0,
    POLL_SET_LOCAL_TIME,
    POLL_SET_DST,
    POLL_CURRENT_START_TIMESTAMP,
    POLL_CURRENT_FORMULA_NAME,
    POLL_CURRENT_WEIGHT,
    POLL_LAST_END_TIMESTAMP,
    POLL_UPDATE_REALTIME,
    POLL_WRITE_REALTIME_BUFFER,
    POLL_READ_ACTIVITY,
    POLL_WRITE_ACTIVITY_TO_DB,
    POLL_TRANSFER,
    POLL_WRITE_DB_NODE_NOT_PRESENT
}PollStates;

typedef enum 
{
    POLL_INCOMPLETE = 0,
    POLL_UART_ERROR,
    POLL_DB_ERROR,
    POLL_POWER_CYCLE,
    POLL_COMPLETE,
    POLL_COMPLETE_SETUPS_AVAILABLE,
    POLL_COMPLETE_C2DSETUPS_TRANSFERRING,
    POLL_COMPLETE_RECORDS_AVAILABLE,
    POLL_COMPLETE_C2DFIRMWARE_TRANSFERRING
}PollStatus;

typedef enum 
{
    TRANSFER_SETUP_READ_SETUP_INDEX,
    TRANSFER_SETUP_READ_OLDEST_UNSTRANSFERRED_SETUP,
    TRANSFER_SETUP_READ_SETUP_TIMESTAMP_BY_INDEX,
    TRANSFER_SETUP_READ_MACHINE_NAME_BY_INDEX,
    TRANSFER_SETUP_READ_COMPANY_NAME_BY_INDEX,
    TRANSFER_SETUP_READ_ACCOUNT_NAME_BY_INDEX,
    TRANSFER_SETUP_READ_INSTALLERS_PASSWORD_BY_INDEX,
    TRANSFER_SETUP_READ_SYSCONFIG_BY_INDEX,
    TRANSFER_SETUP_READ_PUMPS_BY_INDEX,
    TRANSFER_SETUP_READ_FORMULAS_BY_INDEX,
    TRANSFER_SETUP_READ_TUBE_ALARM_BY_INDEX,
    TRANSFER_SETUP_WRITE_SETUP_TO_DB,
    TRANSFER_SETUP_WRITE_SETUP_TRANSFERRED,
    TRANSFER_SETUP_WRITE_DB_NODE_NOT_PRESENT
}TransferSetupStates;
typedef enum 
{
    TRANSFER_SETUP_INCOMPLETE = 0,
    TRANSFER_SETUP_UART_ERROR,
    TRANSFER_SETUP_DB_ERROR,
    TRANSFER_SETUP_COMPLETE
}TransferSetupStatus;
typedef enum TransferC2DSetupStates
{
    TRANSFER_C2DSETUP_CHECK_C2D_TRANSFERRING_DELAY = 0,
    TRANSFER_C2DSETUP_CHECK_C2D_TRANSFERRING,
    TRANSFER_C2DSETUP_POLL1,
    TRANSFER_C2DSETUP_WRITE_TIMESTAMP,
    TRANSFER_C2DSETUP_POLL2,
    TRANSFER_C2DSETUP_WRITE_MACHINE_NAME,
    TRANSFER_C2DSETUP_POLL3,
    TRANSFER_C2DSETUP_WRITE_COMPANY_NAME,
    TRANSFER_C2DSETUP_POLL4,
    TRANSFER_C2DSETUP_WRITE_ACCOUNT_NAME,
    TRANSFER_C2DSETUP_POLL5,
    TRANSFER_C2DSETUP_WRITE_INSTALLERS_PASSWORD,
    TRANSFER_C2DSETUP_POLL6,
    TRANSFER_C2DSETUP_WRITE_TUBE_ALARM,
    TRANSFER_C2DSETUP_POLL7,
    TRANSFER_C2DSETUP_WRITE_SYSCONFIG,
    TRANSFER_C2DSETUP_POLL8,
    TRANSFER_C2DSETUP_WRITE_PUMPS,
    TRANSFER_C2DSETUP_POLL9,
    TRANSFER_C2DSETUP_WRITE_FORMULAS,
    TRANSFER_C2DSETUP_POLL10,
    TRANSFER_C2DSETUP_WRITE_UPDATE,
    TRANSFER_C2DSETUP_POLL11,
    TRANSFER_C2DSETUP_CHECK_C2D_COMPLETE,
    TRANSFER_C2DSETUP_POLL12,
    TRANSFER_C2DSETUP_WRITE_SETUP_TO_DB,
    TRANSFER_C2DSETUP_WRITE_DB_NODE_TE_FAILURE,
    TRANSFER_C2DSETUP_WRITE_DB_NODE_UART_FAILURE,
    TRANSFER_C2DSETUP_WRITE_DB_NODE_NOT_PRESENT
}TransferC2DSetupStates;

typedef enum TransferC2DSetupStatus
{
    TRANSFER_C2D_SETUP_INCOMPLETE = 0,
    TRANSFER_C2D_SETUP_UART_ERROR,
    TRANSFER_C2D_SETUP_DB_ERROR,
    TRANSFER_C2D_SETUP_TE_ERROR,
    TRANSFER_C2D_SETUP_CHECK_TRANSFER_COMPLETE,
    TRANSFER_C2D_SETUP_COMPLETE
}TransferC2DSetupStatus;

typedef enum 
{
    TRANSFER_C2DFIRMWARE_CHECK_C2D_TRANSFERRING_DELAY = 0,
    TRANSFER_C2DFIRMWARE_CHECK_C2D_TRANSFERRING,
    TRANSFER_C2DFIRMWARE_WRITE_TOTAL_SECTORS,
    TRANSFER_C2DFIRMWARE_POLL1,
    TRANSFER_C2DFIRMWARE_WRITE_SECTOR_NUMBER,
    TRANSFER_C2DFIRMWARE_POLL2,
    TRANSFER_C2DFIRMWARE_LOAD_NEXT_PAGE_IN_BUFFER,
    TRANSFER_C2DFIRMWARE_WRITE_PAGE_TO_RAM,
    TRANSFER_C2DFIRMWARE_POLL3,
    TRANSFER_C2DFIRMWARE_WRITE_SECTOR_TO_FLASH,
    TRANSFER_C2DFIRMWARE_POLL4,
    TRANSFER_C2DFIRMWARE_WRITE_DB_UPDATE_PERCENT_COMPLETE,
    TRANSFER_C2DFIRMWARE_COMPLETE_TRANSFER_STEP1,
    TRANSFER_C2DFIRMWARE_COMPLETE_TRANSFER_STEP2,
    TRANSFER_C2DFIRMWARE_POLL5,
    TRANSFER_C2DFIRMWARE_CHECK_C2D_COMPLETE,
    TRANSFER_C2DFIRMWARE_WRITE_FIRMWARE_TO_DB,
    TRANSFER_C2DFIRMWARE_WRITE_DB_NODE_TE_FAILURE,
    TRANSFER_C2DFIRMWARE_WRITE_DB_NODE_UART_FAILURE,
    TRANSFER_C2DFIRMWARE_WRITE_DB_NODE_NOT_PRESENT1,    //010723
    TRANSFER_C2DFIRMWARE_WRITE_DB_NODE_NOT_PRESENT2
}TransferC2DFirmwareStates;

typedef enum TransferC2DFirmwareStatus
{
    TRANSFER_C2D_FIRMWARE_INCOMPLETE = 0,
    TRANSFER_C2D_FIRMWARE_UART_ERROR,
    TRANSFER_C2D_FIRMWARE_DB_ERROR,
    TRANSFER_C2D_FIRMWARE_TE_ERROR,
    TRANSFER_C2D_FIRMWARE_CHECK_TRANSFER_COMPLETE,
    TRANSFER_C2D_FIRMWARE_COMPLETE
}TransferC2DFirmwareStatus;

typedef enum 
{
    COMPLETE = 0,
    IN_PROCESS,
    C2DTESetupTransferringStatus_FAIL
}C2DTESetupTransferringStatus;

typedef enum 
{
    TRANSFER_COMPLETE = 0,
    PROCESS_COMPLETE,
    NEW_SETUP_DETECTED,
    C2DGatewaySetupTransferringStatus_IN_PROCESS
}C2DGatewaySetupTransferringStatus;

typedef enum 
{
    FW_TRANSFER_COMPLETE = 0,
    FW_TRANSFER_IN_PROCESS,
    FW_TRANSFER_FAILED
}C2DTEFirmwareTransferringStatus;

typedef enum 
{
    C2DGatewayFirmwareTransferringStatus_FW_TRANSFER_COMPLETE = 0,
    FW_PROCESS_COMPLETE,
    FW_NEW_FIRMWARE_DETECTED,
    FW_IN_PROCESS
}C2DGatewayFirmwareTransferringStatus;

typedef enum TransferRecordStates
{
    TRANSFER_RECORD_READ_RECORD_INDEX = 0,
    TRANSFER_RECORD_READ_OLDEST_UNTRANSFERRED_RECORD,
    TRANSFER_RECORD_READ_RECORD_BY_INDEX,
    TRANSFER_RECORD_WRITE_RECORD_TO_DB,
    TRANSFER_RECORD_WRITE_REALTIME_TO_DB,
    TRANSFER_RECORD_WRITE_RECORD_TRANSFERRED,
    TRANSFER_RECORD_WRITE_DB_NODE_NOT_PRESENT
}TransferRecordStates;
typedef enum TransferRecordStatus
{
    TRANSFER_RECORD_INCOMPLETE = 0,
    TRANSFER_RECORD_UART_ERROR,
    TRANSFER_RECORD_DB_ERROR,
    TRANSFER_RECORD_COMPLETE
}TransferRecordStatus;

typedef enum ErrorActions
{
    RETRY = 0,
    ErrorActions_FAIL,
    FAIL_WRITE_INACTIVE
}ErrorActions;

typedef enum EventTypes
{
    DISPENSE = 0,
    POWER_UP_NOT_RUNNING = 1,
    POWER_UP_RUNNING = 2,
    FLUSH = 3,
    TRIGGER = 4,
    CYCLE_STARTED = 10,
    DISPENSING_COMPLETE = 11,
    CYCLE_COMPLETE = 12,
    NON_DISPENSE_CYCLE_ENDED = 20,
    ALARM = 100
}EventTypes;

typedef enum FirmwareStatus
{
    FIRMWARE_UPDATE_UNKNOWN = 0,
    FIRMWARE_UPDATE_IN_PROCESS,
    FIRMWARE_UPDATE_BIN_INVALID,
    FIRMWARE_UPDATE_COMPLETE,
    FIRMWARE_UPDATE_TE_NOT_ACTIVE,
    FIRMWARE_UPDATE_NOT_ALLOWED,
    FIRMWARE_UPDATE_FAILURE,
    FIRMWARE_UPDATE_PENDING
}FirmwareStatus;

extern MainStates currentState;


// Database structure
typedef struct {
    uint8_t NumSystemRecords;
    uint8_t NumSetupRecords[NUM_NODES];
} Database_t;

extern TEStates TEState[NUM_NODES];
extern EnrollStates EnrollState[NUM_NODES];
extern EnrollStatus enrollStatus[NUM_NODES];
extern Database_t Database;

void InitVariables(void);
void startup_process(void);

#endif // CONFIGURATION_H